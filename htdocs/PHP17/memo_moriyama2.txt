▼メモ
17章課題（中級）を簡単ですが確認したのでメモを残します。

▼課題
例1) メールアドレス、パスワード共に入力に値が問題ある場合 
例2) メールアドレス、パスワード共に正常に値が入力されている場合 

▼クリア
例1) メールアドレス、パスワード共に入力に値が問題ある場合 
例2) メールアドレス、パスワード共に正常に値が入力されている場合 

it's perfect!!

▼Tips １
$regexp_password   = '/^[a-z0-9\w,.:;&=+*%$#!?@()~\'\/-]{6,18}/'; // パスワードの正規表現
は下記に置き換えることが可能です。
$regexp_password   = '/[!-~]{6,18}/'; // パスワードの正規表現
これは範囲指定がASCIIコード順で範囲指定されているためです。
・ASCIIコード順
!"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~

▼Tips ２
17章は正規表現を学習する章で、メールアドレスの使用について学習する章ではないので
実装的には問題はないと思います・・・ということを前提に。。。

メールアドレスの使用はRFCという規約で定義されています。
（一時期DocomoはRFCに反した定義をして開発者を悩ませた時期があります＞＜）
https://ja.wikipedia.org/wiki/%E3%83%A1%E3%83%BC%E3%83%AB%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9

この規約に従うと、たとえば
$regexp_mail       = '/^[-._a-zA-Z0-9\/]+@[-._a-z0-9]+\.[a-z]{2,4}$/'; // メールアドレスの正規表現
という正規表現では
..moriyama@hoge.com
というRFCに違反したメールアドレスが通ってしまいます。


RFCは結構細かく定義されているので、お暇＆興味があればチラ見しておくとよいと思います。


